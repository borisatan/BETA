1. Accounts
This table will store the information about different accounts (e.g., Revolut, Cash, Debit Card).

Fields:
id (Primary Key) - Unique identifier for each account
name (string) - Name of the account (e.g., "Revolut", "Cash", "Debit Card")
balance (float) - The current balance of the account
type (string) - The type of account (e.g., "Checking", "Savings", "Cash", "Card")
currency (string) - Currency for the account (e.g., "USD", "EUR")
created_at (datetime) - When the account was created
updated_at (datetime) - When the account was last updated
2. Income
This table will store information related to the income that is assigned to specific accounts.

Fields:
id (Primary Key) - Unique identifier for each income entry
amount (float) - The amount of income
source (string) - Source of the income (e.g., "Salary", "Freelance", "Gift")
date_received (datetime) - Date and time when the income was received
account_id (Foreign Key) - Reference to the account where the income is assigned (linked to Accounts)
created_at (datetime) - When the income was logged
updated_at (datetime) - When the income entry was last updated
3. Transactions
This table will store the transaction logs, including expenses, transfers, and income. Each transaction is linked to an account and may involve an expense category.

Fields:
id (Primary Key) - Unique identifier for each transaction
amount (float) - Amount of money spent or transferred (negative for expenses, positive for income/transfer)
date (datetime) - Date of the transaction
description (string) - A short description of the transaction (e.g., "Grocery Shopping", "Gas station")
account_id (Foreign Key) - The account from which the money is taken (linked to Accounts)
category_id (Foreign Key) - The category to which the transaction belongs (linked to Categories)
subcategory_id (Foreign Key) - The subcategory within the category (linked to Subcategories)
transaction_type (string) - Type of transaction: 'expense', 'income', 'transfer'
created_at (datetime) - When the transaction was logged
updated_at (datetime) - When the transaction entry was last updated
4. Categories
Categories will define the higher-level grouping for expenses (e.g., Needs, Wants, Other).

Fields:
id (Primary Key) - Unique identifier for each category
name (string) - Name of the category (e.g., "Needs", "Wants", "Other")
description (string) - A description of the category
created_at (datetime) - When the category was created
updated_at (datetime) - When the category was last updated
5. Subcategories
Subcategories are used to further break down transactions into more specific types (e.g., "Utilities" under "Needs", "Rent" under "Needs", "Car" under "Needs").

Fields:
id (Primary Key) - Unique identifier for each subcategory
name (string) - Name of the subcategory (e.g., "Utilities", "Rent", "Car")
category_id (Foreign Key) - The category this subcategory belongs to (linked to Categories)
created_at (datetime) - When the subcategory was created
updated_at (datetime) - When the subcategory was last updated
6. Daily Aggregations
This table stores pre-aggregated transaction data to efficiently power financial graphs and analytics.

Fields:
id (Primary Key) - Unique identifier for each aggregation
userId (string) - Reference to the user who owns this aggregation
date (timestamp) - The date this aggregation represents
accountId (string, optional) - Reference to a specific account for per-account graphs
categoryId (string, optional) - Reference to a category for category-specific aggregations
totalIncome (number) - Sum of all income transactions for the day
totalExpenses (number) - Sum of all expense transactions for the day
netFlow (number) - Difference between totalIncome and totalExpenses
transactionCount (number) - Number of transactions included in this aggregation
createdAt (timestamp) - When the aggregation was created
updatedAt (timestamp) - When the aggregation was last updated

Database Relationships
Here are the main relationships between the tables:

Accounts ↔ Income:

Each income is linked to a specific account through the account_id.
Accounts ↔ Transactions:

Each transaction is linked to an account through the account_id.
Categories ↔ Subcategories:

Each category can have multiple subcategories. A category has many subcategories, but a subcategory is only linked to one category.
Transactions ↔ Categories ↔ Subcategories:

Each transaction is categorized into a category and a subcategory through the category_id and subcategory_id.

Daily Aggregations ↔ Transactions:
- Each aggregation row represents the sum of transactions for a specific day
- When a transaction is created, updated, or deleted, the corresponding aggregation is automatically updated
- Aggregations can be filtered by accountId or categoryId for specific views

Daily Aggregations ↔ Users:
- Each aggregation belongs to exactly one user
- Users can only access their own aggregations
- Aggregations are automatically created and updated when users modify their transactions

Implementation Details
The system includes:

1. Automatic Updates:
- When a transaction is created, the corresponding daily aggregation is updated
- When a transaction is modified, all affected aggregations are recalculated
- When a transaction is deleted, the aggregations are adjusted accordingly

2. Data Integrity:
- All numeric fields are validated to be non-negative
- NetFlow is validated to equal totalIncome - totalExpenses
- Timestamps are validated to be proper Firestore timestamps
- User ownership is strictly enforced

3. Performance Optimizations:
- List operations are limited to 1000 documents
- Aggregations are stored at daily granularity
- Category-specific aggregations are stored separately from total aggregations

4. Security Rules:
- Only authenticated users can access the collection
- Users can only read/write their own data
- User IDs cannot be modified during updates
- All fields are validated for correct types and values

5. Rebuild Capability:
- The system includes a rebuild function to recalculate all aggregations
- This is useful for data recovery or fixing inconsistencies
- Rebuilds are performed atomically to maintain data integrity



